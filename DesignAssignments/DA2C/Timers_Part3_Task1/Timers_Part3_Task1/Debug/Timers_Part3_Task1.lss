
Timers_Part3_Task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000116  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000116  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  000001ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006b4  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000061d  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000240  00000000  00000000  00000f15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001158  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b1  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001551  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000159a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e1       	ldi	r30, 0x16	; 22
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
uint8_t OVFCOUNT = 0;		// overflow count multiplier
uint8_t OVFLIMIT = 18;		// overflow count limit, set for 40% of DC

int main(void)
{
    DDRB |= (1<<2);						// set PORTB.2 for output (LED)
  a6:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1<<2);					// set LED off
  a8:	2a 9a       	sbi	0x05, 2	; 5
	OCR0A = 252;						// TOP = 256 - 4
  aa:	8c ef       	ldi	r24, 0xFC	; 252
  ac:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (1<<WGM02) | (1<<CS02) | (1<<CS00);	// prescaler = 1024, CTC mode
  ae:	85 b5       	in	r24, 0x25	; 37
  b0:	8d 60       	ori	r24, 0x0D	; 13
  b2:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<OCIE0A);				// enable timer0 compare match int
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	TCNT0 = 0;							// initialize timer to 0
  ba:	16 bc       	out	0x26, r1	; 38
	sei();								// enable interrupts
  bc:	78 94       	sei
  be:	ff cf       	rjmp	.-2      	; 0xbe <main+0x18>

000000c0 <__vector_14>:
    while (1) {			// wait for interrupt
    }
}

ISR (TIMER0_COMPA_vect)
{
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
	OVFCOUNT++;		// increment counter
  ce:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  d2:	8f 5f       	subi	r24, 0xFF	; 255
  d4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	if (OVFCOUNT == OVFLIMIT) {
  d8:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <OVFLIMIT>
  dc:	89 13       	cpse	r24, r25
  de:	11 c0       	rjmp	.+34     	; 0x102 <__vector_14+0x42>
		PORTB ^= (1<<2);		// toggle LED
  e0:	95 b1       	in	r25, 0x05	; 5
  e2:	84 e0       	ldi	r24, 0x04	; 4
  e4:	89 27       	eor	r24, r25
  e6:	85 b9       	out	0x05, r24	; 5
		if(OVFLIMIT == 18) {
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <OVFLIMIT>
  ec:	82 31       	cpi	r24, 0x12	; 18
  ee:	21 f4       	brne	.+8      	; 0xf8 <__vector_14+0x38>
			OVFLIMIT = 27;		// set overflow limit for 40% DC
  f0:	8b e1       	ldi	r24, 0x1B	; 27
  f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <OVFLIMIT>
  f6:	03 c0       	rjmp	.+6      	; 0xfe <__vector_14+0x3e>
		} else {
			OVFLIMIT = 18;		// set overflow limit for 60% DC
  f8:	82 e1       	ldi	r24, 0x12	; 18
  fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <OVFLIMIT>
		}
		OVFCOUNT = 0;		// reset counter
  fe:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	}
	TCNT0 = 0;		// reset timer
 102:	16 bc       	out	0x26, r1	; 38
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
