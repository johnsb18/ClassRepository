
Timers_Part1_Task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000680  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001b6  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000391  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000044  00000000  00000000  00001385  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>


int main(void)
{
    DDRC &= (0<<2);		// connect PORTC.2 to switch as input
  80:	87 b1       	in	r24, 0x07	; 7
  82:	17 b8       	out	0x07, r1	; 7
    PORTC |= (1<<2);	// enable pull-up
  84:	42 9a       	sbi	0x08, 2	; 8
	DDRB |= (1<<2);		// set PORTB.2 for output (LED)
  86:	22 9a       	sbi	0x04, 2	; 4
	TCCR0A = 0;			// normal operation
  88:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1<<CS02) | (1<<CS00); // prescaler = 1024
  8a:	85 b5       	in	r24, 0x25	; 37
  8c:	85 60       	ori	r24, 0x05	; 5
  8e:	85 bd       	out	0x25, r24	; 37
	int count = 0;		// overflow counter
	
	while (1) {
		if(!(PINC & (1<<PINC2))) {	// check if pin in low
  90:	32 99       	sbic	0x06, 2	; 6
  92:	0f c0       	rjmp	.+30     	; 0xb2 <main+0x32>
			PORTB &= ~(1<<2);		// set LED on
  94:	2a 98       	cbi	0x05, 2	; 5
			
			count = 0;				// reset counter
			TCNT0 = 0x00;			// reset timer
  96:	16 bc       	out	0x26, r1	; 38
  98:	2d e4       	ldi	r18, 0x4D	; 77
  9a:	30 e0       	ldi	r19, 0x00	; 0
			while(count < 77) {		// loop until 1.25 sec delay met
				if(TCNT0 == 0xFF){	// if timer overflows
  9c:	86 b5       	in	r24, 0x26	; 38
  9e:	8f 3f       	cpi	r24, 0xFF	; 255
  a0:	19 f0       	breq	.+6      	; 0xa8 <main+0x28>
  a2:	86 b5       	in	r24, 0x26	; 38
  a4:	8f 3f       	cpi	r24, 0xFF	; 255
  a6:	e9 f7       	brne	.-6      	; 0xa2 <main+0x22>
					count++;		// increment counter
					TCNT0 = 0x00;	// reset timer
  a8:	16 bc       	out	0x26, r1	; 38
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	31 09       	sbc	r19, r1
		if(!(PINC & (1<<PINC2))) {	// check if pin in low
			PORTB &= ~(1<<2);		// set LED on
			
			count = 0;				// reset counter
			TCNT0 = 0x00;			// reset timer
			while(count < 77) {		// loop until 1.25 sec delay met
  ae:	b1 f7       	brne	.-20     	; 0x9c <main+0x1c>
  b0:	ef cf       	rjmp	.-34     	; 0x90 <main+0x10>
					TCNT0 = 0x00;	// reset timer
				}
			}
		}
		else {
			PORTB |= (1<<2);		// set LED off
  b2:	2a 9a       	sbi	0x05, 2	; 5
  b4:	ed cf       	rjmp	.-38     	; 0x90 <main+0x10>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
