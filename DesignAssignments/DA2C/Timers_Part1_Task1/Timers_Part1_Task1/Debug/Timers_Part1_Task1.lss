
Timers_Part1_Task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000680  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ec  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001034  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000391  00000000  00000000  00001058  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000040  00000000  00000000  000013e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001429  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>


int main(void)
{
    DDRB |= (1<<2);		// set PORTB.2 for output (LED)
  80:	22 9a       	sbi	0x04, 2	; 4
	TCCR0A = 0;			// normal operation
  82:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1<<CS02) | (1<<CS00); // prescaler = 1024
  84:	85 b5       	in	r24, 0x25	; 37
  86:	85 60       	ori	r24, 0x05	; 5
  88:	85 bd       	out	0x25, r24	; 37
			if(TCNT0 == 0xFF){		// if timer overflows
				count++;			// increment counter
				TCNT0 = 0x00;		// reset timer
			}
		}
		PORTB ^= (1<<2);			// toggle LED off
  8a:	94 e0       	ldi	r25, 0x04	; 4
	int count = 0;		// overflow counter
	
	
    while (1) {
		count = 0;					// reset counter
		TCNT0 = 0x00;				// reset timer
  8c:	16 bc       	out	0x26, r1	; 38
	TCCR0B |= (1<<CS02) | (1<<CS00); // prescaler = 1024
	int count = 0;		// overflow counter
	
	
    while (1) {
		count = 0;					// reset counter
  8e:	20 e0       	ldi	r18, 0x00	; 0
  90:	30 e0       	ldi	r19, 0x00	; 0
		TCNT0 = 0x00;				// reset timer
		while (count < 27){			// loop until 60% DC is met
			if(TCNT0 == 0xFF){		// if timer overflows
  92:	86 b5       	in	r24, 0x26	; 38
  94:	8f 3f       	cpi	r24, 0xFF	; 255
  96:	39 f0       	breq	.+14     	; 0xa6 <main+0x26>
  98:	86 b5       	in	r24, 0x26	; 38
  9a:	8f 3f       	cpi	r24, 0xFF	; 255
  9c:	21 f0       	breq	.+8      	; 0xa6 <main+0x26>
	
	
    while (1) {
		count = 0;					// reset counter
		TCNT0 = 0x00;				// reset timer
		while (count < 27){			// loop until 60% DC is met
  9e:	2b 31       	cpi	r18, 0x1B	; 27
  a0:	31 05       	cpc	r19, r1
  a2:	d4 f3       	brlt	.-12     	; 0x98 <main+0x18>
  a4:	06 c0       	rjmp	.+12     	; 0xb2 <main+0x32>
			if(TCNT0 == 0xFF){		// if timer overflows
				count++;			// increment counter
  a6:	2f 5f       	subi	r18, 0xFF	; 255
  a8:	3f 4f       	sbci	r19, 0xFF	; 255
				TCNT0 = 0x00;		// reset timer
  aa:	16 bc       	out	0x26, r1	; 38
	
	
    while (1) {
		count = 0;					// reset counter
		TCNT0 = 0x00;				// reset timer
		while (count < 27){			// loop until 60% DC is met
  ac:	2b 31       	cpi	r18, 0x1B	; 27
  ae:	31 05       	cpc	r19, r1
  b0:	81 f7       	brne	.-32     	; 0x92 <main+0x12>
			if(TCNT0 == 0xFF){		// if timer overflows
				count++;			// increment counter
				TCNT0 = 0x00;		// reset timer
			}
		}
		PORTB ^= (1<<2);			// toggle LED off
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	89 27       	eor	r24, r25
  b6:	85 b9       	out	0x05, r24	; 5
		count = 0;					// reset counter
		TCNT0 = 0x00;				// reset timer
  b8:	16 bc       	out	0x26, r1	; 38
				count++;			// increment counter
				TCNT0 = 0x00;		// reset timer
			}
		}
		PORTB ^= (1<<2);			// toggle LED off
		count = 0;					// reset counter
  ba:	20 e0       	ldi	r18, 0x00	; 0
  bc:	30 e0       	ldi	r19, 0x00	; 0
		TCNT0 = 0x00;				// reset timer
		while (count < 18){			// loop until remaining 40% DC is met
			if(TCNT0 == 0xFF){		// if timer overflows
  be:	86 b5       	in	r24, 0x26	; 38
  c0:	8f 3f       	cpi	r24, 0xFF	; 255
  c2:	39 f0       	breq	.+14     	; 0xd2 <main+0x52>
  c4:	86 b5       	in	r24, 0x26	; 38
  c6:	8f 3f       	cpi	r24, 0xFF	; 255
  c8:	21 f0       	breq	.+8      	; 0xd2 <main+0x52>
			}
		}
		PORTB ^= (1<<2);			// toggle LED off
		count = 0;					// reset counter
		TCNT0 = 0x00;				// reset timer
		while (count < 18){			// loop until remaining 40% DC is met
  ca:	22 31       	cpi	r18, 0x12	; 18
  cc:	31 05       	cpc	r19, r1
  ce:	d4 f3       	brlt	.-12     	; 0xc4 <main+0x44>
  d0:	06 c0       	rjmp	.+12     	; 0xde <main+0x5e>
			if(TCNT0 == 0xFF){		// if timer overflows
				count++;			// increment counter
  d2:	2f 5f       	subi	r18, 0xFF	; 255
  d4:	3f 4f       	sbci	r19, 0xFF	; 255
				TCNT0 = 0x00;		// reset timer
  d6:	16 bc       	out	0x26, r1	; 38
			}
		}
		PORTB ^= (1<<2);			// toggle LED off
		count = 0;					// reset counter
		TCNT0 = 0x00;				// reset timer
		while (count < 18){			// loop until remaining 40% DC is met
  d8:	22 31       	cpi	r18, 0x12	; 18
  da:	31 05       	cpc	r19, r1
  dc:	81 f7       	brne	.-32     	; 0xbe <main+0x3e>
			if(TCNT0 == 0xFF){		// if timer overflows
				count++;			// increment counter
				TCNT0 = 0x00;		// reset timer
			}
		}
		PORTB ^= (1<<2);			// toggle LED on
  de:	85 b1       	in	r24, 0x05	; 5
  e0:	89 27       	eor	r24, r25
  e2:	85 b9       	out	0x05, r24	; 5
	TCCR0A = 0;			// normal operation
	TCCR0B |= (1<<CS02) | (1<<CS00); // prescaler = 1024
	int count = 0;		// overflow counter
	
	
    while (1) {
  e4:	d3 cf       	rjmp	.-90     	; 0x8c <main+0xc>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
