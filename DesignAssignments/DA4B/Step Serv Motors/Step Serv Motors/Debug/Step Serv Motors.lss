
Step Serv Motors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000138  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000687  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  000008a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000284  00000000  00000000  00000e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001120  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000365  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000014a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>

int main(void)
{
	DDRD = 0x0F;								// PORTD lower pins are output
  80:	8f e0       	ldi	r24, 0x0F	; 15
  82:	8a b9       	out	0x0a, r24	; 10
	TCCR1A |= (1<<WGM01);						// CTC mode
  84:	e0 e8       	ldi	r30, 0x80	; 128
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	82 60       	ori	r24, 0x02	; 2
  8c:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12)|(1<< CS12)|(1<<CS10);	// prescaler = 1024
  8e:	e1 e8       	ldi	r30, 0x81	; 129
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	8d 60       	ori	r24, 0x0D	; 13
  96:	80 83       	st	Z, r24
	
	ADMUX |= (1<<REFS0);				// use ref voltage at Aref
  98:	ec e7       	ldi	r30, 0x7C	; 124
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  a2:	ea e7       	ldi	r30, 0x7A	; 122
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	83 6e       	ori	r24, 0xE3	; 227
  aa:	80 83       	st	Z, r24
	
    while (1)		// timer set for .1 second (65536 - 1562)
	{
		while ((ADCSRA & (1<<ADIF)) == 0);	// process ADC
  ac:	aa e7       	ldi	r26, 0x7A	; 122
  ae:	b0 e0       	ldi	r27, 0x00	; 0
		OCR1A = ADC;				// set new limit
  b0:	28 e7       	ldi	r18, 0x78	; 120
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	e8 e8       	ldi	r30, 0x88	; 136
  b6:	f0 e0       	ldi	r31, 0x00	; 0
		
		TCNT1 = 0;					// reset timer
  b8:	0f 2e       	mov	r0, r31
  ba:	f4 e8       	ldi	r31, 0x84	; 132
  bc:	ef 2e       	mov	r14, r31
  be:	f1 2c       	mov	r15, r1
  c0:	f0 2d       	mov	r31, r0
		while (TCNT0 != OCR1A) {}	// delay
		PORTD = 0x09;				// rotate motor
  c2:	09 e0       	ldi	r16, 0x09	; 9
		
		TCNT1 = 0;					// reset timer
		while (TCNT0 != OCR1A) {}	// delay
		PORTD = 0x03;				// rotate motor
  c4:	13 e0       	ldi	r17, 0x03	; 3
		
		TCNT1 = 0;					// reset timer
		while (TCNT0 != OCR1A) {}	// delay
		PORTD = 0x06;				// rotate motor
  c6:	76 e0       	ldi	r23, 0x06	; 6
			
		TCNT1 = 0;					// reset timer
		while (TCNT0 != OCR1A) {}	// delay
		PORTD = 0x0C;				// rotate motor
  c8:	6c e0       	ldi	r22, 0x0C	; 12
	ADMUX |= (1<<REFS0);				// use ref voltage at Aref
	ADCSRA |= (1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(ADPS2)|(1<<ADPS1)|(1<<ADPS0);
	
    while (1)		// timer set for .1 second (65536 - 1562)
	{
		while ((ADCSRA & (1<<ADIF)) == 0);	// process ADC
  ca:	8c 91       	ld	r24, X
  cc:	84 ff       	sbrs	r24, 4
  ce:	fd cf       	rjmp	.-6      	; 0xca <main+0x4a>
		OCR1A = ADC;				// set new limit
  d0:	e9 01       	movw	r28, r18
  d2:	88 81       	ld	r24, Y
  d4:	99 81       	ldd	r25, Y+1	; 0x01
  d6:	91 83       	std	Z+1, r25	; 0x01
  d8:	80 83       	st	Z, r24
		
		TCNT1 = 0;					// reset timer
  da:	e7 01       	movw	r28, r14
  dc:	19 82       	std	Y+1, r1	; 0x01
  de:	18 82       	st	Y, r1
		while (TCNT0 != OCR1A) {}	// delay
  e0:	86 b5       	in	r24, 0x26	; 38
  e2:	40 81       	ld	r20, Z
  e4:	51 81       	ldd	r21, Z+1	; 0x01
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	84 17       	cp	r24, r20
  ea:	95 07       	cpc	r25, r21
  ec:	c9 f7       	brne	.-14     	; 0xe0 <main+0x60>
		PORTD = 0x09;				// rotate motor
  ee:	0b b9       	out	0x0b, r16	; 11
		
		TCNT1 = 0;					// reset timer
  f0:	e7 01       	movw	r28, r14
  f2:	19 82       	std	Y+1, r1	; 0x01
  f4:	18 82       	st	Y, r1
		while (TCNT0 != OCR1A) {}	// delay
  f6:	86 b5       	in	r24, 0x26	; 38
  f8:	40 81       	ld	r20, Z
  fa:	51 81       	ldd	r21, Z+1	; 0x01
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	84 17       	cp	r24, r20
 100:	95 07       	cpc	r25, r21
 102:	c9 f7       	brne	.-14     	; 0xf6 <main+0x76>
		PORTD = 0x03;				// rotate motor
 104:	1b b9       	out	0x0b, r17	; 11
		
		TCNT1 = 0;					// reset timer
 106:	e7 01       	movw	r28, r14
 108:	19 82       	std	Y+1, r1	; 0x01
 10a:	18 82       	st	Y, r1
		while (TCNT0 != OCR1A) {}	// delay
 10c:	86 b5       	in	r24, 0x26	; 38
 10e:	40 81       	ld	r20, Z
 110:	51 81       	ldd	r21, Z+1	; 0x01
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	84 17       	cp	r24, r20
 116:	95 07       	cpc	r25, r21
 118:	c9 f7       	brne	.-14     	; 0x10c <main+0x8c>
		PORTD = 0x06;				// rotate motor
 11a:	7b b9       	out	0x0b, r23	; 11
			
		TCNT1 = 0;					// reset timer
 11c:	e7 01       	movw	r28, r14
 11e:	19 82       	std	Y+1, r1	; 0x01
 120:	18 82       	st	Y, r1
		while (TCNT0 != OCR1A) {}	// delay
 122:	86 b5       	in	r24, 0x26	; 38
 124:	40 81       	ld	r20, Z
 126:	51 81       	ldd	r21, Z+1	; 0x01
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	84 17       	cp	r24, r20
 12c:	95 07       	cpc	r25, r21
 12e:	c9 f7       	brne	.-14     	; 0x122 <main+0xa2>
		PORTD = 0x0C;				// rotate motor
 130:	6b b9       	out	0x0b, r22	; 11
	}
 132:	cb cf       	rjmp	.-106    	; 0xca <main+0x4a>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
